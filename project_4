{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled50.ipynb",
      "private_outputs": true,
      "provenance": [],
      "authorship_tag": "ABX9TyOcT9x4TKIzpIGWIWB0EgBG",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Jeong-ki-hun/Project_4/blob/main/project_4\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kqCbzPU-uMre"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "\n",
        "from tensorflow.keras.applications.resnet50 import preprocess_input, decode_predictions\n",
        "from tensorflow.keras.applications.resnet50 import ResNet50\n",
        "from keras.applications import vgg16\n",
        "\n",
        "from tensorflow.keras.preprocessing import image\n",
        "from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Conv2D, MaxPooling2D, Flatten, BatchNormalization, Dropout\n",
        "from tensorflow.keras.models import Model, Sequential\n",
        "from tensorflow.keras import layers"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "id": "_bJmI4iPuNf4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential, Model\n",
        "from tensorflow.keras.layers import Dense, Dropout, Input\n",
        "from tensorflow.keras.applications import MobileNet, Xception, ResNet50, InceptionV3\n",
        "from tensorflow.keras.layers import Flatten, Conv2D, MaxPooling2D\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator"
      ],
      "metadata": {
        "id": "j-sYi0nBB3Dz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tr = '/content/drive/MyDrive/style/train'\n",
        "val = '/content/drive/MyDrive/style/test'\n",
        "class_list = ['casual', 'romantic', 'sport', 'street']\n",
        "\n",
        "tr = tf.keras.preprocessing.image_dataset_from_directory(\n",
        "    tr,\n",
        "    labels=\"inferred\",\n",
        "    label_mode=\"categorical\",\n",
        "    class_names=class_list,\n",
        "    seed=4,\n",
        ")\n",
        "\n",
        "val = tf.keras.preprocessing.image_dataset_from_directory(\n",
        "    val,\n",
        "    labels=\"inferred\",\n",
        "    label_mode=\"categorical\",\n",
        "    class_names=class_list,\n",
        "    seed=4,\n",
        ")\n",
        "\n",
        "tr, val"
      ],
      "metadata": {
        "id": "eA_K-aYWGtJc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model1 = Sequential()\n",
        "model1.add(Conv2D(32, (3, 3), activation='relu', input_shape=(256, 256, 3)))\n",
        "model1.add(MaxPooling2D((2, 2)))\n",
        "model1.add(Conv2D(64, (3, 3), activation='relu'))\n",
        "model1.add(MaxPooling2D((2, 2)))\n",
        "model1.add(Conv2D(64, (3, 3), activation='relu'))\n",
        "model1.add(Flatten())\n",
        "model1.add(Dense(64, activation='relu'))\n",
        "model1.add(Dense(4, activation='softmax')) # 4가지 class로 분류\n",
        "\n",
        "model1.summary()"
      ],
      "metadata": {
        "id": "t8hkarYUGs6k"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model1.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "history=model1.fit(train_ds, validation_data=val_ds, epochs=5)"
      ],
      "metadata": {
        "id": "92APqMYHGs4F"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "resnet = ResNet50(weights='imagenet', include_top=False)\n",
        "\n",
        "x = resnet.output\n",
        "x = GlobalAveragePooling2D()(x)\n",
        "x = Dense(512, activation='relu')(x)\n",
        "predictions = Dense(4, activation='sigmoid')(x)\n",
        "model3 = Model(resnet.input, predictions)\n",
        "model3.summary()"
      ],
      "metadata": {
        "id": "JnExzy4HTi5I"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model3.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "model3.fit(tr, validation_data=val, epochs=5)"
      ],
      "metadata": {
        "id": "Fbm9DHsUYT-_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "img = Image.open('/content/drive/MyDrive/imgs/와릿이즌-슈무아치로고반팔티셔츠화이트-27,300원 복사본.jpg')\n",
        "img_r = img.resize((256, 256))\n",
        "img_a = img_to_array(img_r)\n",
        "img_ra = img_a.reshape((1, 256, 256, 3))\n",
        "pred = model3.predict(img_ra)\n",
        "label = pred.argmax()\n",
        "print(label)"
      ],
      "metadata": {
        "id": "FzyYKyzeo_Cs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "class_names = ['casual', 'romantic', 'sport', 'street']\n",
        "\n",
        "\n",
        "#label_str = class_names[label]\n",
        "pred_str = class_names[np.argmax(pred[pos])]\n",
        "\n",
        "print('pred:' + pred_str)\n",
        "\n",
        "img"
      ],
      "metadata": {
        "id": "-1w_fHVcyCWB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "SQOxqyZ_0NWN"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}